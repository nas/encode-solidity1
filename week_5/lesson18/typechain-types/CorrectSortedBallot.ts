/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface CorrectSortedBallotInterface extends utils.Interface {
  functions: {
    "proposals(uint256)": FunctionFragment;
    "proposalsBeingSorted(uint256)": FunctionFragment;
    "restartSorting()": FunctionFragment;
    "savedIndex()": FunctionFragment;
    "sortProposals(uint256)": FunctionFragment;
    "sorted()": FunctionFragment;
    "sortedWords()": FunctionFragment;
    "swaps()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "proposals"
      | "proposalsBeingSorted"
      | "restartSorting"
      | "savedIndex"
      | "sortProposals"
      | "sorted"
      | "sortedWords"
      | "swaps"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "proposals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalsBeingSorted",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "restartSorting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "savedIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sortProposals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "sorted", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sortedWords",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "swaps", values?: undefined): string;

  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalsBeingSorted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restartSorting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "savedIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sortProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sorted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sortedWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swaps", data: BytesLike): Result;

  events: {};
}

export interface CorrectSortedBallot extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CorrectSortedBallotInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { name: string; voteCount: BigNumber }>;

    proposalsBeingSorted(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { name: string; voteCount: BigNumber }>;

    restartSorting(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    savedIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    sortProposals(
      steps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sorted(
      overrides?: CallOverrides
    ): Promise<[boolean] & { isSorted: boolean }>;

    sortedWords(overrides?: CallOverrides): Promise<[BigNumber]>;

    swaps(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  proposals(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { name: string; voteCount: BigNumber }>;

  proposalsBeingSorted(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { name: string; voteCount: BigNumber }>;

  restartSorting(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  savedIndex(overrides?: CallOverrides): Promise<BigNumber>;

  sortProposals(
    steps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sorted(overrides?: CallOverrides): Promise<boolean>;

  sortedWords(overrides?: CallOverrides): Promise<BigNumber>;

  swaps(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { name: string; voteCount: BigNumber }>;

    proposalsBeingSorted(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { name: string; voteCount: BigNumber }>;

    restartSorting(overrides?: CallOverrides): Promise<void>;

    savedIndex(overrides?: CallOverrides): Promise<BigNumber>;

    sortProposals(
      steps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sorted(overrides?: CallOverrides): Promise<boolean>;

    sortedWords(overrides?: CallOverrides): Promise<BigNumber>;

    swaps(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalsBeingSorted(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    restartSorting(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    savedIndex(overrides?: CallOverrides): Promise<BigNumber>;

    sortProposals(
      steps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sorted(overrides?: CallOverrides): Promise<BigNumber>;

    sortedWords(overrides?: CallOverrides): Promise<BigNumber>;

    swaps(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalsBeingSorted(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    restartSorting(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    savedIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sortProposals(
      steps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sorted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sortedWords(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swaps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
